// Top-level build file where you can add configuration options common to all sub-projects/modules.


buildscript {
  apply from: "${rootDir}/gradle/version/version.gradle"
  apply from: "${rootDir}/gradle/version/version_tasks.gradle"
  repositories {
    mavenLocal()
    mavenCentral()
    google()
    maven { url "https://jitpack.io" }
    maven { url 'https://plugins.gradle.org/m2/' }
  }
  dependencies {
    classpath libs.gradle.plugin.core

    // NOTE: Do not place your application dependencies here; they belong
    // in the individual module build.gradle files
    classpath libs.gradle.plugin.versions
    classpath(libs.grgit.plugin.core) {
      exclude group: 'org.codehaus.groovy', module: 'groovy'
    }
    //classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
  }
}

allprojects {
  group = GROUP
  version = versionName()
}

tasks.register('clean', Delete) {
  delete layout.buildDirectory
}

def tagName = "v" + versionName()

def getStatus() {
  def describe = grgit.describe()
  def pattern = /^(.*)-([0-9]+)-(g[0-9a-z]+)$/
  def tag = describe =~ pattern

  if (tag.matches()) {
    tag = tag[0][1];
    def logs = grgit.log {
      range(tag, 'HEAD')
    }
    if (!logs.isEmpty()) {
      return logs
          .collect { "Autor: ${it.author.name}; Data: ${it.getDate().format('yyyy-MM-dd HH:mm:ss')}; Opis:${it.fullMessage}" }
          .asImmutable()
          .toString()
    } else {
      return null
    }
  } else {
    return null
  }
}

tasks.register('releng') {
  description = "Application release: $tagName"
  doLast {
    def changes = getStatus()
    if (changes == null) {
      throw new RuntimeException("There are changes not commited yet.\n$changes")
    }

    //add tag
    grgit.tag.add {
      name = tagName
      message = "Release of $tagName"
    }
  }
}